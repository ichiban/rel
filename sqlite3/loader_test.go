package sqlite3

import (
	"reflect"
	"testing"
	"time"

	"github.com/stretchr/testify/assert"
	"gopkg.in/DATA-DOG/go-sqlmock.v1"

	"github.com/ichiban/rel/models"
)

func TestLoader_Load(t *testing.T) {
	assert := assert.New(t)

	db, mock, err := sqlmock.New()
	assert.Nil(err)
	defer db.Close()

	rows := sqlmock.NewRows([]string{"name"})
	rows = rows.AddRow("accounts")
	rows = rows.AddRow("bottles")
	mock.ExpectQuery(`SELECT name FROM sqlite_master WHERE type = 'table' AND name NOT LIKE 'sqlite_%' ORDER BY name`).WillReturnRows(rows)

	mock.ExpectQuery(`SELECT rowid FROM accounts LIMIT 1`).WillReturnRows(sqlmock.NewRows([]string{}))

	rows = sqlmock.NewRows([]string{"cid", "name", "type", "notnull", "dflt_value", "pk"})
	rows = rows.AddRow(0, "id", "INTEGER", false, nil, 1)
	rows = rows.AddRow(1, "name", "TEXT", true, `''`, 0)
	rows = rows.AddRow(2, "created_at", "DATETIME", true, `CURRENT_TIMESTAMP`, 0)
	rows = rows.AddRow(3, "updated_at", "DATETIME", true, `CURRENT_TIMESTAMP`, 0)
	rows = rows.AddRow(4, "created_by", "TEXT", true, `''`, 0)
	mock.ExpectQuery(`PRAGMA table_info\(accounts\)`).WillReturnRows(rows)

	mock.ExpectQuery(`SELECT rowid FROM bottles LIMIT 1`).WillReturnRows(sqlmock.NewRows([]string{}))

	rows = sqlmock.NewRows([]string{"cid", "name", "type", "notnull", "dflt_value", "pk"})
	rows = rows.AddRow(0, "id", "INTEGER", false, nil, 1)
	rows = rows.AddRow(1, "account_id", "INTEGER", true, nil, 0)
	rows = rows.AddRow(2, "rating", "INTEGER", true, `3`, 0)
	rows = rows.AddRow(3, "name", "TEXT", true, `''`, 0)
	rows = rows.AddRow(4, "vineyard", "TEXT", true, `''`, 0)
	rows = rows.AddRow(5, "varietal", "TEXT", true, `''`, 0)
	rows = rows.AddRow(6, "vintage", "INTEGER", true, `1900`, 0)
	rows = rows.AddRow(7, "color", "TEXT", true, `''`, 0)
	rows = rows.AddRow(8, "sweetness", "INTEGER", false, nil, 0)
	rows = rows.AddRow(9, "country", "TEXT", false, nil, 0)
	rows = rows.AddRow(10, "region", "TEXT", false, nil, 0)
	rows = rows.AddRow(11, "review", "TEXT", false, nil, 0)
	rows = rows.AddRow(12, "created_at", "DATETIME", true, `CURRENT_TIMESTAMP`, 0)
	rows = rows.AddRow(13, "updated_at", "DATETIME", true, `CURRENT_TIMESTAMP`, 0)
	mock.ExpectQuery(`PRAGMA table_info\(bottles\)`).WillReturnRows(rows)

	l := Loader{DB: db}
	var schema models.Schema
	assert.Nil(l.Load(&schema))
	assert.Nil(mock.ExpectationsWereMet())

	assert.Len(schema.Tables, 2)
	assert.Equal("accounts", schema.Tables[0].Name)
	assert.Len(schema.Tables[0].Columns, 5)
	assert.Equal("id", schema.Tables[0].Columns[0].Name)
	assert.Equal(reflect.TypeOf(int64(0)), schema.Tables[0].Columns[0].RawType)
	assert.False(schema.Tables[0].Columns[0].Nullable)
	assert.True(schema.Tables[0].Columns[0].Default)
	assert.Equal("name", schema.Tables[0].Columns[1].Name)
	assert.Equal(reflect.TypeOf(""), schema.Tables[0].Columns[1].RawType)
	assert.False(schema.Tables[0].Columns[1].Nullable)
	assert.True(schema.Tables[0].Columns[1].Default)
	assert.Equal("created_at", schema.Tables[0].Columns[2].Name)
	assert.Equal(reflect.TypeOf(time.Time{}), schema.Tables[0].Columns[2].RawType)
	assert.False(schema.Tables[0].Columns[2].Nullable)
	assert.True(schema.Tables[0].Columns[2].Default)
	assert.Equal("updated_at", schema.Tables[0].Columns[3].Name)
	assert.Equal(reflect.TypeOf(time.Time{}), schema.Tables[0].Columns[3].RawType)
	assert.False(schema.Tables[0].Columns[3].Nullable)
	assert.True(schema.Tables[0].Columns[3].Default)
	assert.Equal("created_by", schema.Tables[0].Columns[4].Name)
	assert.Equal(reflect.TypeOf(""), schema.Tables[0].Columns[4].RawType)
	assert.False(schema.Tables[0].Columns[4].Nullable)
	assert.True(schema.Tables[0].Columns[4].Default)
	assert.Equal("bottles", schema.Tables[1].Name)
	assert.Len(schema.Tables[1].Columns, 14)
	assert.Equal("id", schema.Tables[1].Columns[0].Name)
	assert.Equal(reflect.TypeOf(int64(0)), schema.Tables[1].Columns[0].RawType)
	assert.False(schema.Tables[1].Columns[0].Nullable)
	assert.True(schema.Tables[1].Columns[0].Default)
	assert.Equal("account_id", schema.Tables[1].Columns[1].Name)
	assert.Equal(reflect.TypeOf(int64(0)), schema.Tables[1].Columns[1].RawType)
	assert.False(schema.Tables[1].Columns[1].Nullable)
	assert.False(schema.Tables[1].Columns[1].Default)
	assert.Equal("rating", schema.Tables[1].Columns[2].Name)
	assert.Equal(reflect.TypeOf(int64(0)), schema.Tables[1].Columns[2].RawType)
	assert.False(schema.Tables[1].Columns[2].Nullable)
	assert.True(schema.Tables[1].Columns[2].Default)
	assert.Equal("name", schema.Tables[1].Columns[3].Name)
	assert.Equal(reflect.TypeOf(""), schema.Tables[1].Columns[3].RawType)
	assert.False(schema.Tables[1].Columns[3].Nullable)
	assert.True(schema.Tables[1].Columns[3].Default)
	assert.Equal("vineyard", schema.Tables[1].Columns[4].Name)
	assert.Equal(reflect.TypeOf(""), schema.Tables[1].Columns[4].RawType)
	assert.False(schema.Tables[1].Columns[4].Nullable)
	assert.True(schema.Tables[1].Columns[4].Default)
	assert.Equal("varietal", schema.Tables[1].Columns[5].Name)
	assert.Equal(reflect.TypeOf(""), schema.Tables[1].Columns[5].RawType)
	assert.False(schema.Tables[1].Columns[5].Nullable)
	assert.True(schema.Tables[1].Columns[5].Default)
	assert.Equal("vintage", schema.Tables[1].Columns[6].Name)
	assert.Equal(reflect.TypeOf(int64(0)), schema.Tables[1].Columns[6].RawType)
	assert.False(schema.Tables[1].Columns[6].Nullable)
	assert.True(schema.Tables[1].Columns[6].Default)
	assert.Equal("color", schema.Tables[1].Columns[7].Name)
	assert.Equal(reflect.TypeOf(""), schema.Tables[1].Columns[7].RawType)
	assert.False(schema.Tables[1].Columns[7].Nullable)
	assert.True(schema.Tables[1].Columns[7].Default)
	assert.Equal("sweetness", schema.Tables[1].Columns[8].Name)
	assert.Equal(reflect.TypeOf(int64(0)), schema.Tables[1].Columns[8].RawType)
	assert.True(schema.Tables[1].Columns[8].Nullable)
	assert.False(schema.Tables[1].Columns[8].Default)
	assert.Equal("country", schema.Tables[1].Columns[9].Name)
	assert.Equal(reflect.TypeOf(""), schema.Tables[1].Columns[9].RawType)
	assert.True(schema.Tables[1].Columns[9].Nullable)
	assert.False(schema.Tables[1].Columns[9].Default)
	assert.Equal("region", schema.Tables[1].Columns[10].Name)
	assert.Equal(reflect.TypeOf(""), schema.Tables[1].Columns[10].RawType)
	assert.True(schema.Tables[1].Columns[10].Nullable)
	assert.False(schema.Tables[1].Columns[10].Default)
	assert.Equal("review", schema.Tables[1].Columns[11].Name)
	assert.Equal(reflect.TypeOf(""), schema.Tables[1].Columns[11].RawType)
	assert.True(schema.Tables[1].Columns[11].Nullable)
	assert.False(schema.Tables[1].Columns[11].Default)
	assert.Equal("created_at", schema.Tables[1].Columns[12].Name)
	assert.Equal(reflect.TypeOf(time.Time{}), schema.Tables[1].Columns[12].RawType)
	assert.False(schema.Tables[1].Columns[12].Nullable)
	assert.True(schema.Tables[1].Columns[12].Default)
	assert.Equal("updated_at", schema.Tables[1].Columns[13].Name)
	assert.Equal(reflect.TypeOf(time.Time{}), schema.Tables[1].Columns[13].RawType)
	assert.False(schema.Tables[1].Columns[13].Nullable)
	assert.True(schema.Tables[1].Columns[13].Default)
}
