{{$driver := .Driver -}}
{{$embed := .Embed -}}
package {{.Package}}

import (
	"database/sql"
	{{- if eq $driver "postgres"}}
	"fmt"
	"regexp"
	{{- end}}
	"strings"
	"time"
)

{{- range .Tables}}
{{$name := .Name}}
const (
	{{- range .Columns}}
	{{$name | Camel}}{{.Name | Camel}} = FieldName(`{{.Name | camel}}`)
	{{- end}}
)

// {{.Name | singular | Camel}} represents a record in {{.Name}} table.
type {{.Name | singular | Camel}} struct {
{{- if $embed}}
	{{- range $embed}}
	{{.}}
	{{- end}}

	{{- end}}
	{{- range .Columns}}
	{{.Name | Camel}} {{.Type}} `json:"{{.Name | camel}}"`
	{{- end}}
	Errors map[FieldName]string `json:"errors,omitempty"`
}

func (m *{{.Name | singular | Camel}}) Create(db DB) error {
	cs := make([]string, 0, {{.Columns | len}})
	ps := make([]string, 0, {{.Columns | len}})
	vs := make([]interface{}, 0, {{.Columns | len}})
	cs = append(cs{{range .Columns}}{{if not .Default}}, `{{.Name}}`{{end}}{{end}})
	ps = append(ps{{range .Columns}}{{if not .Default}}, "?"{{end}}{{end}})
	vs = append(vs{{range .Columns}}{{if not .Default}}, m.{{.Name | Camel}}{{end}}{{end}})
	{{- range .Columns}}
	{{- if .Default}}
	if m.{{.Name | Camel}} != {{.Type | zero}} {
		cs = append(cs, `{{.Name}}`)
		ps = append(ps, "?")
		vs = append(vs, m.{{.Name | Camel}})
	}
	{{- end}}
	{{- end}}
	{{- if eq $driver "postgres"}}
    row := db.QueryRow(`INSERT INTO {{.Name}}(` + strings.Join(cs, ", ") + `) VALUES (` + strings.Join(ps, ", ") + `) RETURNING {{range $index, $column := .Columns}}{{if $index}}, {{end}}{{$column.Name}}{{end}}`, vs...)
	{{- else}}
    res, err := db.Exec(`INSERT INTO {{.Name}}(` + strings.Join(cs, ", ") + `) VALUES (` + strings.Join(ps, ", ") + `)`, vs...)
	if err != nil {
		return err
	}
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}
	row := db.QueryRow(`SELECT {{range $index, $column := .Columns}}{{if $index}}, {{end}}{{$column.Name}}{{end}} FROM {{.Name}} WHERE rowid = ?`, id)
	{{- end}}
	return row.Scan({{range $index, $column := .Columns}}{{if $index}}, {{end}}&m.{{.Name | Camel}}{{end}})
}

func (m *{{.Name | singular | Camel}}) Update(db DB) error {
	{{- if eq $driver "postgres"}}
    row := db.QueryRow(`UPDATE {{.Name}} SET {{range $index, $column := .Columns}}{{if $index}}, {{end}}{{$column.Name}} = ?{{end}} WHERE {{range $index, $column := .PrimaryKey}}{{if $index}}, {{end}}{{$column.Name}} = ?{{end}} RETURNING {{range $index, $column := .Columns}}{{if $index}}, {{end}}{{$column.Name}}{{end}}`{{range .Columns}}, m.{{.Name | Camel}}{{end}}{{range .PrimaryKey}}, m.{{.Name | Camel}}{{end}})
    return row.Scan({{range $index, $column := .Columns}}{{if $index}}, {{end}}&m.{{.Name | Camel}}{{end}})
	{{- else}}
    _, err := db.Exec(`UPDATE {{.Name}} SET {{range $index, $column := .Columns}}{{if $index}}, {{end}}	{{$column.Name}} = ?{{end}} WHERE {{range $index, $column := .PrimaryKey}}{{if $index}}, {{end}}{{$column.Name}} = ?{{end}}`{{range .Columns}}, m.{{.Name | Camel}}{{end}}{{range .PrimaryKey}}, m.{{.Name | Camel}}{{end}})
    return err
	{{- end}}
}

func (m *{{.Name | singular | Camel}}) Delete(db DB) error {
	_, err := db.Exec(`DELETE FROM {{.Name}} WHERE {{range $index, $column := .PrimaryKey}}{{if $index}} AND {{end}}{{$column.Name}} = ?{{end}}`{{range .PrimaryKey}}, m.{{.Name | Camel}}{{end}})
	return err
}

func (m *{{.Name | singular | Camel}}) Find(db DB, scopes ...Scope) (bool, error) {
	q := Query{
		Limit: 1,
	}
	for _, s := range scopes {
		s(&q)
	}
	row := db.QueryRow(`SELECT {{range $index, $column := .Columns}}{{if $index}}, {{end}}{{$column.Name}}{{end}} FROM {{.Name}}` + q.String(), q.Params()...)
	switch err := row.Scan({{range $index, $column := .Columns}}{{if $index}}, {{end}}&m.{{.Name | Camel}}{{end}}); err {
	case nil:
		return true, nil
	case sql.ErrNoRows:
		return false, nil
	default:
		return false, err
	}
}

type {{.Name | plural | Camel}} []{{.Name | singular | Camel}}

func (ms *{{.Name | plural | Camel}}) Find(db DB, scopes ...Scope) (bool, error) {
	var q Query
	for _, s := range scopes {
		s(&q)
	}
	*ms = (*ms)[:0]
	rows, err := db.Query(`SELECT {{range $index, $column := .Columns}}{{if $index}}, {{end}}{{$column.Name}}{{end}} FROM {{.Name}}` + q.String(), q.Params()...)
	if err != nil {
		return false, err
	}
	defer rows.Close()
	var m {{.Name | singular | Camel}}
	for rows.Next() {
		if err := rows.Scan({{range $index, $column := .Columns}}{{if $index}}, {{end}}&m.{{.Name | Camel}}{{end}}); err != nil {
			return false, err
		}
		*ms = append(*ms, m)
	}
	return len(*ms) != 0, nil
}
{{- end}}

type Scope func(*Query)
{{- range .Columns}}
func {{.Name | Camel}}(v interface{}) Scope {
	return func(q *Query) {
		q.Where = append(q.Where, Condition{SQL: `{{.Name}} = ?`, Values: []interface{}{v}})
	}
}

func OrderBy{{.Name | Camel}}Asc(q *Query) {
	q.Order = append(q.Order, `{{.Name}} ASC`)
}

func OrderBy{{.Name | Camel}}Desc(q *Query) {
	q.Order = append(q.Order, `{{.Name}} DESC`)
}
{{- end}}
func Limit(n int) Scope {
	return func(q *Query) {
		q.Limit = n
	}
}

type Query struct {
	Where []Condition
	Order []string
	Limit interface{}
}

func (q *Query) String() string {
	ws := make([]string, 0, len(q.Where))
	for _, c := range q.Where {
		ws = append(ws, c.SQL)
	}
	ps := make([]string, 0, 4)
	if q.Where != nil {
		ps = append(ps, " WHERE ")
	}
	ps = append(ps, strings.Join(ws, " AND "))
	if q.Order != nil {
		ps = append(ps, " ORDER BY ", strings.Join(q.Order, ", "))
	}
	if q.Limit != nil {
		ps = append(ps, " LIMIT ?")
	}
	return strings.Join(ps, "")
}

func (q *Query) Params() []interface{} {
	ps := make([]interface{}, 0, len(q.Where)*2)
	for _, c := range q.Where {
		ps = append(ps, c.Values...)
	}
	if q.Limit != nil {
		ps = append(ps, q.Limit)
	}
	return ps
}

type Condition struct {
	SQL string
	Values []interface{}
}

type DB interface {
	Exec(query string, args ...interface{}) (sql.Result, error)
	Query(query string, args ...interface{}) (*sql.Rows, error)
	QueryRow(query string, args ...interface{}) *sql.Row
}

{{- if eq $driver "postgres"}}
// BindVarDB replaces placeholders ? to postgres' $x
type BindVarDB struct {
	DB
}

var placeholder = regexp.MustCompile(`\?`)

func bindVar(s string) string {
	var i int
	return placeholder.ReplaceAllStringFunc(s, func(s string) string {
		i++
		return fmt.Sprintf("$%d", i)
	})
}

func (db BindVarDB) Exec(query string, args ...interface{}) (sql.Result, error) {
	return db.DB.Exec(bindVar(query), args...)
}

func (db BindVarDB) Query(query string, args ...interface{}) (*sql.Rows, error) {
	return db.DB.Query(bindVar(query), args...)
}

func (db BindVarDB) QueryRow(query string, args ...interface{}) *sql.Row {
	return db.DB.QueryRow(bindVar(query), args...)
}
{{- end}}

type FieldName string
